/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2020-08-01 05:18:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import devdog_calendar.*;
import java.util.Calendar;
import java.util.List;
import devdog_calendar.jdbc.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("devdog_calendar.jdbc");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("devdog_calendar");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<title>갤린더</title>\r\n");
      out.write("<style>\r\n");
      out.write("@font-face {\r\n");
      out.write("\tfont-family: 'Binggrae-Bold';\r\n");
      out.write("\tsrc:\r\n");
      out.write("\t\turl('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/Binggrae-Bold.woff')\r\n");
      out.write("\t\tformat('woff');\r\n");
      out.write("\tfont-weight: normal;\r\n");
      out.write("\tfont-style: normal;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("\tfont-family: 'Binggrae-Bold';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table {\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("\tfont-family: 'Binggrae-Bold';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#date {\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#ym td {\r\n");
      out.write("\tleft: 50%;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\theight: 20px;\r\n");
      out.write("\tpadding-top: 30px;\r\n");
      out.write("\tpadding-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#ym_b {\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("\theight: 100px;\r\n");
      out.write("\tfont-size: 50px;\r\n");
      out.write("\tborder: 0;\r\n");
      out.write("\toutline: 0;\r\n");
      out.write("\tbackground-color: #FFFFFF\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td {\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\twidth: 120px;\r\n");
      out.write("\theight: 120px;\r\n");
      out.write("\tvertical-align: top;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("\tbackground-color: #dddddd;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\theight: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td:nth-child(1), th:nth-child(1) {\r\n");
      out.write("\tcolor: red;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td:nth-child(7), th:nth-child(7) {\r\n");
      out.write("\tcolor: blue;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("span.green {\r\n");
      out.write("\tfont-size: 9pt;\r\n");
      out.write("\tcolor: green;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("span.gray {\r\n");
      out.write("\tfont-size: 9pt;\r\n");
      out.write("\tcolor: gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".table td:hover {\r\n");
      out.write("\tbackground-color: grey;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".top_bar {\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\ttop: 0;\r\n");
      out.write("\tdisplay: flex;\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("\tlist-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".top_bar_menu {\r\n");
      out.write("\tpadding: 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".top_bar_menu a {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("\tfont-family: 'Binggrae-Bold';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".top_bar_menu a:hover {\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction selectCheck(form) {\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction monthDown(form) {\r\n");
      out.write("\t\tif (form.month.value > 1) {\r\n");
      out.write("\t\t\tform.month.value--;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tform.month.value = 12;\r\n");
      out.write("\t\t\tform.year.value--;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction monthUp(form) {\r\n");
      out.write("\t\tif (form.month.value < 12) {\r\n");
      out.write("\t\t\tform.month.value++;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tform.month.value = 1;\r\n");
      out.write("\t\t\tform.year.value++;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t<nav>\r\n");
      out.write("\t\t\t<ul class=\"top_bar\">\r\n");
      out.write("\t\t\t\t<li class=\"top_bar_menu\"><a href=\"memberList.jsp\"\r\n");
      out.write("\t\t\t\t\ttarget=\"_self\">멤버리스트</a></li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t");

		Calendar cr = Calendar.getInstance();
		int year = cr.get(Calendar.YEAR);
		int month = cr.get(Calendar.MONTH);
		int date = cr.get(Calendar.DATE);

		String input_year = request.getParameter("year");
		String input_month = request.getParameter("month");
		if (input_month != null) {
			month = Integer.parseInt(input_month) - 1;
		}
		if (input_year != null) {
			year = Integer.parseInt(input_year);
		}
		cr.set(year, month, 1);
		int startDate = cr.getMinimum(Calendar.DATE);
		int lastDate = cr.getActualMaximum(Calendar.DATE);
		int startDay = cr.get(Calendar.DAY_OF_WEEK);
		int count = 0;
	
      out.write("\r\n");
      out.write("\t<form method=\"post\" action=\"calendar.jsp\" name=\"change\">\r\n");
      out.write("\t\t<table id=\"date\">\r\n");
      out.write("\t\t\t<tr id=\"ym\">\r\n");
      out.write("\t\t\t\t<td><input type=\"button\" id=\"ym_b\" value=\"◁\"\r\n");
      out.write("\t\t\t\t\tonClick=\"monthDown(this.form)\"></td>\r\n");
      out.write("\t\t\t\t<td><select name=\"year\" id=\"ym_b\" style=\"width: 150px;\"\r\n");
      out.write("\t\t\t\t\tonchange=\"selectCheck(this.form)\">\r\n");
      out.write("\t\t\t\t\t\t");

							for (int i = year - 10; i < year + 10; i++) {
								String selected = (i == year) ? "selected" : "";
								String color = (i == year) ? "#CCCCCC" : "#FFFFFF";
								out.print("<option value=" + i + " " + selected + " style=background:" + color + ">" + i + "</option>");
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t</select></td>\r\n");
      out.write("\t\t\t\t<td><select name=\"month\" id=\"ym_b\"\r\n");
      out.write("\t\t\t\t\tonchange=\"selectCheck(this.form)\">\r\n");
      out.write("\t\t\t\t\t\t");

							for (int i = 1; i <= 12; i++) {
								String selected = (i == month + 1) ? "selected" : "";
								out.print("<option value=" + i + " " + selected + ">" + i + "</option>");
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t</select></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"button\" id=\"ym_b\" value=\"▷\"\r\n");
      out.write("\t\t\t\t\tonClick=\"monthUp(this.form)\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<table id=\"table\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>일</th>\r\n");
      out.write("\t\t\t\t<th>월</th>\r\n");
      out.write("\t\t\t\t<th>화</th>\r\n");
      out.write("\t\t\t\t<th>수</th>\r\n");
      out.write("\t\t\t\t<th>목</th>\r\n");
      out.write("\t\t\t\t<th>금</th>\r\n");
      out.write("\t\t\t\t<th>토</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					for (int i = 1; i < startDay; i++) {
						count++;
				
      out.write("\r\n");
      out.write("\t\t\t\t<td>&nbsp;</td>\r\n");
      out.write("\t\t\t\t");

					}
					for (int i = startDate; i <= lastDate; i++) {
						count++;
				
      out.write("\r\n");
      out.write("\t\t\t\t<td>");
      out.print(i);
      out.write("<br> ");

 	int memoyear, memomonth, memoday;
 		try {
 			String sql = "SELECT * FROM schedule";
 			Connection connection = DB.getConnection("devdog");
 			PreparedStatement statement = connection.prepareStatement(sql);
 			ResultSet rs = statement.executeQuery();
 			while (rs.next()) {
 				memoyear = rs.getInt("dateYear");
 				memomonth = rs.getInt("dateMonth");
 				memoday = rs.getInt("dateDate");
 				if (year == memoyear && month + 1 == memomonth && i == memoday) {
 					out.println(rs.getString("contents") + "<br>");
 				}
 			}
 			rs.close();
 		} catch (Exception e) {
 			System.out.println(e);
 		}
 		;
 
      out.write("</td>\r\n");
      out.write("\t\t\t\t");

					if (count % 7 == 0 && i < lastDate) {
				
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

					}
					}
					while (count % 7 != 0) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<td>&nbsp;</td>\r\n");
      out.write("\t\t\t\t");

					count++;
					}
				
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
